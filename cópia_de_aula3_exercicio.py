# -*- coding: utf-8 -*-
"""Cópia de aula3_exercicio.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18mqwXkWfGO14dy6l08_NtH1ZJxy2Jo0h
"""

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import datetime as dt
import plotly.express as px

"""# Exercício 1

Crie uma sequência de 3 meses de dados horários de dados fictícios de concentração, e guarde em um dataframe. Suponha que esses dados estejam em horário utc.
*   Converta os horários para a hora local do Amazonas.
*   Agrupe os dados por dia e calcule as médias diárias
*   Agrupe os dados por mês e calcule as médias mensais
*   Faça um gráfico de série temporal com as concentrações originais, médias diárias e mensais
"""

mesesutc = pd.date_range(start="2024-01-01", end="2024-03-31", freq="h", tz="UTC")
concen = np.random.randint(0, 1000, size=len(mesesutc))
df = pd.DataFrame({"data": mesesutc, "concentracao": concen})
df.head()
mesesmanaus = mesesutc.tz_convert("America/Manaus")
df["data"] = mesesmanaus
df.head()

day = df.groupby(pd.Grouper(key="data", freq="D"))
daym = day.mean()
print(daym)

month = df.groupby(pd.Grouper(key="data", freq="MS"))
monthm = month.mean()
print(monthm)

#Série original agrupada por hora
hora = mesesmanaus.hour
serietemporal = plt.plot(mesesmanaus, concen)
plt.xticks(rotation=90)
plt.xlabel("Data")
plt.ylabel("Concentração")
plt.title("Série temporal de concentração por hora")
plt.show()

#Série temporal agrupada por dia
serietemporaldia = plt.plot(daym.index, daym["concentracao"])
plt.xticks(rotation=90)
plt.xlabel("Data")
plt.ylabel("Concentração")
plt.title("Série temporal de concentração por dia")
plt.show()

#Série temporal agrupada por mês
serietemporalmes = plt.plot(monthm.index, monthm["concentracao"])
plt.xticks(rotation=90)
plt.xlabel("Data")
plt.ylabel("Concentração")
plt.title("Série temporal de concentração por mês")
plt.show()

seriecompleta = plt.plot(mesesmanaus, concen)
seriediaria = plt.plot(daym.index, daym["concentracao"])
seriemensal = plt.plot(monthm.index, monthm["concentracao"])
plt.xticks(rotation=90)
plt.xlabel("Data")
plt.ylabel("Concentração")
plt.title("Série temporal de concentração")
plt.show()

# Deletando a variável mesesmanaus
del mesesmanaus

"""# Exercício 2

Utilizando o mesmo dataframe do exercício anterior:
*   Extraia o mês de cada data e guarde em uma nova coluna do dataframe
*   Faça um boxplot das concentrações agregadas por mês (ou seja, um boxplot com 3 caixas, uma para cada mês)
"""

meses = mesesutc.month
print(meses)
x = pd.DataFrame({"mês":meses, "concentracao2":concen})
print(x)
x.boxplot(column="concentracao2", by="mês")
plt.xlabel("Mês")
plt.ylabel("Concentração")
plt.title("Boxplot das concentrações agregadas por mês")
plt.show()

x.head()

"""# Exercício 3

Utilizando o mesmo dataframe do exercício anterior:


*   Extraia a hora de cada data e guarde em uma nova coluna do dataframe
*   Calcule o ciclo diurno médio das concentrações. Ou seja, a médias das concentrações medidas às 0:00, 1:00, 2:00, etc. Para isso, agrupe os dados por hora, usando a função groupby().
*  Faça um gráfico do ciclo diurno médio.
"""

hora = mesesutc.hour
print(hora)

y = pd.DataFrame({"hora":hora, "concentracao3":concen})
y.head()
hours = y.groupby("hora")
hoursm = hours.mean()
print(hoursm)

#Primeiramente, utilizando o plotly
graph1 = px.line(hoursm, x=hoursm.index, y= "concentracao3",title="Média das concentrações por hora",
labels={"hoursm": "horas","concentracao3":"concentração"})
graph1.show()

#Reproduzindo o exercício com o matplotlib
ciclodiurno = plt.plot(hoursm.index, hoursm["concentracao3"])
plt.xlabel("Hora")
plt.ylabel("Concentração")
plt.title("Ciclo diurno médio das concentrações")
plt.show()

"""# Extras

Selecionei abaixo partes de um tutorial para você estudar. Leia e reproduza alguns exemplos.

https://realpython.com/python-datetime/#using-the-python-datetime-module

https://realpython.com/python-datetime/#doing-arithmetic-with-python-datetime

https://jakevdp.github.io/PythonDataScienceHandbook/03.11-working-with-time-series.html
"""

date(year=2078, month=2, day=28)
dt.date(2078, 2, 28)
time(hour=13, minute=14, second=31)
dt.time(13, 14, 31)
datetime(year=2020, month=1, day=31, hour=13, minute=14, second=31)
dt.datetime(2020, 1, 31, 13, 14, 31)

>>> today = date.today()
>>> today
dt.date(2020, 1, 24)
>>> now = datetime.now()
>>> now
dt.datetime(2020, 1, 24, 14, 4, 57, 10015)
>>> current_time = time(now.hour, now.minute, now.second)
>>> datetime.combine(today, current_time)
dt.datetime(2020, 1, 24, 14, 4, 57)

>>> date_string = "01-31-2020 14:45:37"
>>> format_string = "%m-%d-%Y %H:%M:%S"
>>> print(date_string)

>>> datetime.strptime(date_string, format_string)
dt.datetime(2020, 1, 31, 14, 45, 37)
print(datetime.strptime(date_string, format_string))

>>> from datetime import datetime, timedelta
>>> now = datetime.now()
>>> now
dt.datetime(2020, 1, 26, 9, 37, 46, 380905)
>>> tomorrow = timedelta(days=+1)
>>> now + tomorrow
dt.datetime(2020, 1, 27, 9, 37, 46, 380905)

#segunda parte#
>>> delta = timedelta(days=+3, hours=-4)
>>> now + delta
dt.datetime(2020, 1, 29, 5, 37, 46, 380905)

>>> from dateutil.relativedelta import relativedelta
>>> tomorrow = relativedelta(days=+1)
>>> now + tomorrow
dt.datetime(2020, 1, 27, 9, 37, 46, 380905)

>>> delta = relativedelta(years=+5, months=+1, days=+3, hours=-4, minutes=-30)
>>> now + delta

>>> now = datetime(2020, 1, 26, 9, 37, 46, 380905)
>>> tomorrow = datetime(2020, 1, 27, 9, 37, 46, 380905)
>>> relativedelta(now, tomorrow)