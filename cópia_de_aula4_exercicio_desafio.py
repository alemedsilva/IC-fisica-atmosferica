# -*- coding: utf-8 -*-
"""Cópia de aula4_exercicio_desafio.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11Y11PeoHnJtupc1ncfEEsf2gPqYhs6OM

Esse exercício é baseado em um arquivo de dados mensais de concentração de CO2, disponível em:

https://drive.google.com/file/d/1MScqyq6bMyJ9o275P162sxU0G8b8zjc9/view?usp=sharing

dados_co2.txt

Coluna 1: ano

Coluna 2: mês

Coluna 3: CO2 (ppm)

# 1) Leitura

Leia o arquivo da maneira que achar melhor. Veja os exemplos dos notebooks aula4a e aula4b. Salve os dados em um dataframe.
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import datetime as dt

URL = 'https://drive.google.com/file/d/1MScqyq6bMyJ9o275P162sxU0G8b8zjc9/view?usp=sharing'
Separador_decimal = '.'
Separador_coluna = '\t'
Fimdalinha = '\n'
Cabec = None
file_id = URL.split('/d/')[1].split('/')[0]
dados_csv_url = f'https://drive.google.com/uc?export=download&id={file_id}'
print('Original: ', URL)
print('Modificado: ', dados_csv_url)

dados_csv = pd.read_csv(dados_csv_url, decimal = Separador_decimal, header = Cabec, lineterminator = Fimdalinha, delim_whitespace=True)
dados_csv

dados_csv.columns = ['ano', 'mês','CO2']
dados_csv

"""# 2) Datetime

Transforme as colunas ano e mês em uma única coluna que contenha a data (objeto datetime). Veja os exemplos do notebook aula3. Em seguida, faça o seu dataframe ser indexado pela data, para facilitar operações com o tempo.
"""

# O Gemini deu a dica de transformar as colunas 'ano' e 'mês' em integers, para
# que assim, seja possível transformá-las em objeto datetime
dados_csv['ano'] = dados_csv['ano'].astype(int)
dados_csv['mês'] = dados_csv['mês'].astype(int)
# A função de transformação "to_datetime" necessita de uma coluna de dia
# Também não está compreendendo as colunas ano e mês em português, por isso a
# mudança para o Inglês
dados_csv = dados_csv.rename(columns={'ano': 'year', 'mês': 'month'})
dados_csv['data'] = pd.to_datetime(dados_csv[['year', 'month']].assign(day=1))
dados_csv

dados_csv = dados_csv.set_index('data')
dados_csv

"""# 3) Análise Descritiva

Descreva os dados de CO2. Quantas linhas de dados (shape)? Existem dados faltantes? Qual é concentração média e o desvio-padrão?

Faça um gráfico de série temporal, isto é, CO2 versus tempo.
"""

dados_csv.isna().sum()

# Não há dados faltantes. Agora, vamos ver a concentração média
concent_med = dados_csv['CO2'].mean()
concent_med

# O desvio-padrão
concent_desvpad = dados_csv['CO2'].std()
concent_desvpad

# Por fim, a série temporal de CO2:
serietemporal = plt.plot(dados_csv.index, dados_csv['CO2'])
plt.xlabel('Mês')
plt.ylabel('CO2')
plt.title('Série Temporal de CO2')
serietemporal
# Deixei este resultado, porque estranhei a série temporal mensal obtida

"""# 4) Média anual

Agrupar os dados por ano, obtendo uma série temporal de dados anuais de CO2. Veja exemplos do notebook aula3. Faça um gráfico da série temporal de médias anuais de CO2.
"""

ano = dados_csv['CO2'].groupby(dados_csv.index.year)
media_anual = ano.mean('CO2')
media_anual

serietemporal_anual = plt.plot(media_anual['year'], media_anual['CO2'])
plt.xlabel('Ano')
plt.ylabel('CO2')
plt.title('Série Temporal de Médias Anuais de CO2')
serietemporal_anual

"""# 5) Ciclo anual médio

Agrupar os dados por mês. Isto é, fazer a média de CO2 em todos os janeiros, todos os fevereiros, etc. Com isso, você vai obter o ciclo anual médio. Veja exemplos do notebook aula3. Faça um gráfico do ciclo anual médio e verifique se existe uma sazonalidade bem definida para as concentrações de CO2.
"""

mes = dados_csv.groupby(dados_csv.index.month)
media_mensal = mes.mean('CO2')
media_mensal

ciclo_anual_medio = plt.plot(media_mensal['month'], media_mensal['CO2'])
plt.xlabel('Mês')
plt.ylabel('CO2')
plt.title('Ciclo Anual Médio de CO2')
ciclo_anual_medio